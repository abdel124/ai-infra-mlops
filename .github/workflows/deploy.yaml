name: Push Docker Image to ECR with Debug.

on:
  push:
    branches:
      - main


env:
  AWS_REGION: us-west-2
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: iris-api
  IMAGE_TAG: latest
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com

jobs:
  push-test:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.DEPLOY_ROLE }}
        aws-region: ${{ env.AWS_REGION }}

    - name:  Show AWS Identity
      run: aws sts get-caller-identity

    - name: Check Docker Config Before Login
      run: cat ~/.docker/config.json || echo "No Docker config found"

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Check Docker Config After Login
      run: |
        if [ -f ~/.docker/config.json ]; then
          cat ~/.docker/config.json
        else
          echo "No Docker config found"
        fi

    - name: Native Docker ECR Login (Manual)
      run: |
        aws ecr get-login-password --region ${{ env.AWS_REGION }} \
        | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

    - name: Success Message
      if: ${{ success() }}
      run: echo "Image pushed to ECR successfully!"

    - name: Build and push Docker image to ECR
      run: |
        IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        docker build -t $IMAGE_URI ./model-api
        docker push $IMAGE_URI
  
    - name: Update Kubeconfig for EKS
      run: |
        aws eks update-kubeconfig \
          --region ${{ env.AWS_REGION }} \
          --name mlops-cluster

    - name: Deploy New Image to EKS
      run: |
        IMAGE_URI=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        echo "Updating deployment with image $IMAGE_URI"
        kubectl set image deployment/iris-api iris-api=$IMAGE_URI --record

    - name: Verify Rollout
      run: |
        kubectl rollout status deployment/iris-api