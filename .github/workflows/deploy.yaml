name: Push Docker Image to ECR with Debug

on:
  workflow_dispatch:  # You can also use `push` if you prefer

env:
  AWS_REGION: us-west-2
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: iris-api
  IMAGE_TAG: test
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com

jobs:
  push-test:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.GITHUB_DEPLOY_ROLE }}
        aws-region: ${{ env.AWS_REGION }}

    - name:  Show AWS Identity
      run: aws sts get-caller-identity

    - name: Check Docker Config Before Login
      run: cat ~/.docker/config.json || echo "No Docker config found"

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: : Check Docker Config After Login
      run: cat ~/.docker/config.json || echo "No Docker config found"

    - name: Pull, Tag and Push Alpine Image to ECR
      run: |
        IMAGE_URI=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        echo "Using IMAGE_URI=$IMAGE_URI"

        echo " Pulling Alpine..."
        docker pull alpine

        echo "Tagging image..."
        docker tag alpine $IMAGE_URI

        echo "Pushing image..."
        docker push $IMAGE_URI

    - name: Success Message
      if: ${{ success() }}
      run: echo "Image pushed to ECR successfully!"

    - name: Build and push Docker image to ECR
      run: |
        IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        docker build -t $IMAGE_URI ./model-api
        docker push $IMAGE_URI